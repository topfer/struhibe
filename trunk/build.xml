<?xml version='1.0' encoding='utf-8'?>
<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="My Project" default="compile" basedir=".">


<!-- ===================== Property Definitions =========================== -->


  <property environment="env"/>
  <property file="build.properties"/>


<!-- ==================== Project Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="project.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
<!--
    <pathelement location="${foo.jar}"/>
-->

    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/server/lib"/>
    <fileset dir="${catalina.home}/server/lib">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${basedir}/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${build.home}/WEB-INF/classes"/>
    <pathelement location="${src.home}"/>
  </path>

<!-- ================== Custom Ant Task Definitions ======================= -->
<!--

  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web application installed with Tomcat 5.  Before they
  can be successfully utilized, you must perform the following steps:

  - Copy the file "server/lib/catalina-ant.jar" from your Tomcat 5
    installation into the "lib" directory of your Ant installation.

  - Create a "build.properties" file in your application's top-level
    source directory (or your user login home directory) that defines
    appropriate values for the "manager.password", "manager.url", and
    "manager.username" properties described above.

  For more information about the Manager web application, and the functionality
  of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.

-->
  <taskdef name="deploy" classpathref="project.classpath" classname="org.apache.catalina.ant.DeployTask"/>
  <taskdef name="list" classpathref="project.classpath" classname="org.apache.catalina.ant.ListTask"/>
  <taskdef name="reload" classpathref="project.classpath" classname="org.apache.catalina.ant.ReloadTask"/>
  <taskdef name="undeploy" classpathref="project.classpath" classname="org.apache.catalina.ant.UndeployTask"/>
  <taskdef name="svn" classpathref="project.classpath" classname="org.tigris.subversion.svnant.SvnTask"/>
  <taskdef name="xmltask" classpathref="project.classpath" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
  <taskdef name="hibernatetool" classpathref="project.classpath" classname="org.hibernate.tool.ant.HibernateToolTask"/>
  <taskdef name="middlegen" classpathref="project.classpath" classname="middlegen.MiddlegenTask"/>

<!-- ==================== External Dependencies =========================== -->

<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 5
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar" value="/path/to/foo.jar"/>
-->

<!-- ==================== Sets Java's web proxy properties ================ -->

<!--

  Sets Java's web proxy properties, so that tasks and code run in the 
  same JVM can have through-the-firewall access to remote web sites, 
  and remote ftp sites.

-->

<target name="setproxy" if="proxy.http.host">
  <!-- no proxy needed -->
  <!-- <setproxy proxyhost="${proxy.http.host}" proxyport="${proxy.http.port}"/> -->
</target>

<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>



<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
         excludes="generated/**"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
        <classpath refid="project.classpath"/>
    </javac>

    <!-- Copy application classes -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}">
	<include name="**/*.class"/>
      </fileset>
    </copy>

  </target>


<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">

    <!-- Copy documentation subdirectories -->
    <!--
    <mkdir   dir="${dist.home}/docs"/>
    <copy    todir="${dist.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>
    -->

    <mkdir   dir="${dist.home}"/>

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>


<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
      <classpath refid="project.classpath"/>
    </javadoc>

  </target>



<!-- ====================== List Target =================================== -->

<!--

  The "list" target asks the specified Tomcat 5 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->

  <target name="list"
   description="List installed applications on servlet container">

    <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

  </target>


<!-- ==================== Middlegen GUI Target ================================== -->

<!--
    Starts up the mddlegen GUI
-->
  <target name="middlegen" description="Starts up the mddlegen GUI">

     <!-- Create generated direcory under src -->
    <mkdir  dir="${src.home}/generated"/>

    <middlegen appname="struhibe"
	       prefsdir="${basedir}" gui="true"
	       databaseurl="jdbc:mysql://localhost:3306/struhibe_db"
	       driver="com.mysql.jdbc.Driver"
	       username="struhibe_usr"
	       password="struhibe_pwd"
	       schema="">
  
      <hibernate destination="${src.home}/generated"
		 package="com.ft.ht"/>

    </middlegen>
  </target>

<!-- ==================== Hibergen Target ================================== -->

<!--

  The Hibergen target produces the java sources for the beans and the
  database schemas described in the hibernate mapping files.
  Normally the user should not call this target directly as its
  going to overwrite existing beans

-->

  <target name="hibergen" depends="codegen,schemagen"
   description="Generate beans and DB schemas"/>


<!-- ==================== Codegen Target ================================== -->

  <target name="codegen" depends="prepare" description="Generate Java source from the O/R mapping files">

     <!-- Create generated direcory under src -->
    <mkdir  dir="${src.home}/generated"/>

    <hibernatetool destdir="${src.home}/generated">
      <configuration configurationfile="${build.home}/WEB-INF/classes/hibernate.mysql.cfg.xml"/>
      <!-- <configuration configurationfile="${build.home}/WEB-INF/classes/hibernate.hsqldb.cfg.xml"/> -->
      <hbm2java/>
      <classpath refid="project.classpath"/>
    </hibernatetool>
  </target>

<!-- ==================== Schemagen Target ================================== -->

  <target name="schemagen" depends="prepare" description="Generate DB schema from the O/R mapping files">

     <!-- Create generated direcory under src -->
    <mkdir  dir="${src.home}/generated"/>

    <hibernatetool destdir="${src.home}/generated">
      <configuration configurationfile="${build.home}/WEB-INF/classes/hibernate.mysql.cfg.xml"/>
      <!-- <configuration configurationfile="${build.home}/WEB-INF/classes/hibernate.hsqldb.cfg.xml"/> -->
      <hbm2ddl export="false" drop="true" create="true" outputfilename="sql.ddl"/>
      <classpath refid="project.classpath"/>
    </hibernatetool>
  </target>

<!-- ==================== Set Application Version Target ================================== -->

<!--

   Normally, this task is executed indirectly when needed.

-->

  <target name="setappversion">

    <!-- Set app.version to -dev-r${revision} -->
    <svn javahl="false">
      <status path="." revisionProperty="svn.revision"/>
    </svn>

    <property name="app.version" value="dev-0.1"/>

  </target>

<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare" depends="setproxy,setappversion">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>
    <mkdir  dir="${build.home}/WEB-INF/lib"/>
     <!-- Create misc direcory under build -->
    <mkdir  dir="${build.home}/misc"/>
     <!-- Create data direcory under build (for hsql) -->
    <mkdir  dir="${build.home}/data"/>

    <!-- Copy all static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <!-- Creates a timestamp of specified format. The standard properties are set also. -->
    <tstamp>
      <format property="build.time" pattern="dd.MMM.yyyy"/>
    </tstamp>

    <!-- Update the web.xml -->
    <xmltask source="${web.home}/WEB-INF/web.xml" dest="${build.home}/WEB-INF/web.xml"> 
      <insert path="/web-app/display-name" xml="/svn release r${svn.revision}/built on ${build.time}"/> 
    </xmltask>

    <!-- Copy jars(libraries) -->
    <copy todir="${build.home}/WEB-INF/lib">
      <fileset dir="${basedir}/lib"/>
    </copy>

    <!-- Copy project resources and configuration -->
    <copy todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}">
	<include name="**/*.xml"/>
	<include name="**/*.properties"/>
      </fileset>
    </copy>

    <!-- Copy additional resources -->
    <copy todir="${build.home}/misc">
      <fileset dir="${misc.home}"/>
    </copy>

  </target>


<!-- ==================== Install Target ================================== -->

<!--

  The "install" target tells the specified Tomcat 5 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

  <target name="install" depends="compile"
   description="Install application to servlet container">

    <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}-${app.version}"
       localWar="file://${build.home}"/>

  </target>


<!-- ==================== Reload Target =================================== -->

<!--

  The "reload" signals the specified application Tomcat 5 to shut itself down
  and reload. This can be useful when the web application context is not
  reloadable and you have updated classes or property files in the
  /WEB-INF/classes directory or when you have added or updated jar files in the
  /WEB-INF/lib directory.

  NOTE: The /WEB-INF/web.xml web application configuration file is not reread
  on a reload. If you have made changes to your web.xml file you must stop
  then start the web application. 

-->

  <target name="reload" depends="compile"
   description="Reload application on servlet container">

    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}-${app.version}"/>

  </target>


<!-- ==================== Remove Target =================================== -->

<!--

  The "remove" target tells the specified Tomcat 5 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

  <target name="remove" depends="setappversion"
   description="Remove application on servlet container">

    <undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}-${app.version}"/>

  </target>


</project>
